@startuml
class Algorithm {
}
class Saliency{
    String className;
    ---
    +static Ptr<Saliency> create( const String& saliencyType )
    +bool computeSaliency( const Mat& image, Mat& saliencyMap );
    +String getClassName() const;
}
class Saliency
note right: Saliency is the general interface for each specialized saliency category

class StaticSaliency{
    +Params
    ---
    +bool computeSaliency( const Mat& image, Mat& saliencyMap );
}

class MotionSaliency{
    +Params
    ---
    +bool computeSaliency( const Mat& image, Mat& saliencyMap );
}

class Objectness{
    +Params
    ---
    +bool computeSaliency( const Mat& image, Mat& saliencyMap );
}

class StaticSaliencySpectralResidual{
    +Params
    ---
    StaticSaliencySpectralResidual( const SaliencySpectralResidual::Params &parameters);
    +bool computeSaliency( const Mat& image, Mat& saliencyMap );
}
class MotionSaliencyPBAS{
    +Params
    ---
    MotionSaliencyPBAS();
    +bool computeSaliency( const Mat& image, Mat& saliencyMap );
}
class ObjectnessBING{
    +Params
    ---
    ObjectnessBING();
    +bool computeSaliency( const Mat& image, Mat& saliencyMap );
}

Algorithm <|-- Saliency : virtual inheritance
Saliency <|-- StaticSaliency : virtual inheritance
Saliency <|-- MotionSaliency : virtual inheritance
Saliency <|-- Objectness : virtual inheritance

StaticSaliency <|-- StaticSaliencySpectralResidual
MotionSaliency <|-- MotionSaliencyPBAS
Objectness <|-- ObjectnessBING


note "Single instance of the Static Saliency" as N1
note "Single instance of the Motion Saliency" as N2
note "Single instance of the Objectness" as N3
StaticSaliencySpectralResidual .. N1
MotionSaliencyPBAS .. N2
ObjectnessBING .. N3

note "General interface for each specialized type of saliency algorithm" as N4
StaticSaliency .. N4
MotionSaliency .. N4
Objectness .. N4



@enduml
